float polygon_1[5][2] = {{7,5},{12,5},{15,10},{10,13},{5,10}};
float polygon_2[13][2] = {{5,5},{10,-5},{15,5},{15,10},{20,10},{20,15},{15,20},{10,15},{5,20},{0,15},{10,10},{0,10}};
float polygon_3[100][2] = {{49.97532801828658,1.5705379539064122}, {49.778098230154,4.705415665925713}, {49.38441702975689,7.821723252011541}, {48.79583809693737,10.907162069827123}, {48.01468428384715,13.94955530196146}, {47.04403844771127,16.936896012264565}, {45.887731284199056,19.857394531739025}, {44.550326209418394,22.699524986977334}, {43.03710135019718,25.45207078751856}, {41.3540287137281,28.104168892606523}, {39.50775061878452,30.64535268264882}, {37.50555348152298,33.06559326618259}, {35.355339059327385,35.35533905932737}, {33.065593266182596,37.50555348152297}, {30.64535268264883,39.50775061878451}, {28.104168892606534,41.35402871372809}, {25.45207078751856,43.03710135019718}, {22.69952498697734,44.55032620941839}, {19.85739453173904,45.88773128419905}, {16.93689601226456,47.04403844771128}, {13.949555301961464,48.01468428384715}, {10.907162069827123,48.79583809693737}, {7.821723252011535,49.38441702975689}, {4.705415665925714,49.778098230154}, {1.5705379539064197,49.97532801828658}, {-1.570537953906414,49.97532801828658}, {-4.705415665925719,49.778098230154}, {-7.821723252011552,49.38441702975688}, {-10.907162069827118,48.79583809693737}, {-13.949555301961466,48.01468428384715}, {-16.93689601226457,47.04403844771127}, {-19.857394531739043,45.88773128419905}, {-22.699524986977337,44.550326209418394}, {-25.452070787518544,43.03710135019719}, {-28.104168892606516,41.354028713728106}, {-30.645352682648813,39.50775061878453}, {-33.06559326618257,37.505553481522995}, {-35.35533905932737,35.35533905932738}, {-37.50555348152297,33.06559326618259}, {-39.50775061878451,30.64535268264884}, {-41.35402871372808,28.10416889260654}, {-43.037101350197176,25.452070787518572}, {-44.55032620941839,22.699524986977345}, {-45.887731284199056,19.857394531739033}, {-47.04403844771127,16.936896012264565}, {-48.014684283847146,13.949555301961478}, {-48.795838096937366,10.907162069827137}, {-49.38441702975689,7.821723252011527}, {-49.778098230154,4.70541566592574}, {-49.97532801828658,1.5705379539064341}, {-49.97532801828658,-1.5705379539063997}, {-49.778098230154,-4.705415665925705}, {-49.38441702975689,-7.8217232520115365}, {-48.79583809693737,-10.907162069827125}, {-48.01468428384715,-13.949555301961464}, {-47.04403844771127,-16.936896012264572}, {-45.88773128419907,-19.857394531739}, {-44.550326209418394,-22.69952498697733}, {-43.03710135019718,-25.45207078751856}, {-41.354028713728106,-28.104168892606513}, {-39.50775061878453,-30.645352682648813}, {-37.50555348152299,-33.06559326618259}, {-35.35533905932737,-35.355339059327385}, {-33.06559326618262,-37.50555348152296}, {-30.645352682648824,-39.50775061878452}, {-28.104168892606545,-41.35402871372808}, {-25.452070787518593,-43.03710135019717}, {-22.699524986977345,-44.55032620941839}, {-19.857394531739057,-45.88773128419905}, {-16.93689601226457,-47.04403844771127}, {-13.94955530196148,-48.014684283847146}, {-10.907162069827162,-48.79583809693736}, {-7.821723252011596,-49.384417029756875}, {-4.705415665925698,-49.778098230154}, {-1.570537953906415,-49.97532801828658}, {1.5705379539063966,-49.97532801828658}, {4.705415665925725,-49.778098230154}, {7.821723252011534,-49.38441702975689}, {10.9071620698271,-48.79583809693738}, {13.94955530196146,-48.01468428384715}, {16.93689601226455,-47.04403844771128}, {19.857394531739036,-45.88773128419905}, {22.69952498697733,-44.5503262094184}, {25.452070787518537,-43.03710135019719}, {28.10416889260653,-41.35402871372809}, {30.645352682648806,-39.507750618784534}, {33.065593266182596,-37.50555348152297}, {35.35533905932734,-35.35533905932742}, {37.50555348152299,-33.06559326618258}, {39.50775061878451,-30.645352682648824}, {41.35402871372808,-28.104168892606545}, {43.03710135019717,-25.4520707875186}, {44.55032620941839,-22.699524986977348}, {45.88773128419905,-19.857394531739057}, {47.04403844771129,-16.93689601226453}, {48.014684283847146,-13.949555301961484}, {48.79583809693736,-10.907162069827166}, {49.38441702975688,-7.821723252011554}, {49.778098230154,-4.705415665925745}, {49.97532801828658,-1.5705379539064181}};
float points[5][2] = {{1,1},{0,0},{10,10},{10,0},{15,15}};

float minDist = 100;
float dist = 101;

void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);

  float func_dist;
  
  for (int i = 0; i <= 4; i++){
    Serial.print("Point: ");
    Serial.print(points[i][0]);
    Serial.print(", ");
    Serial.println(points[i][1]);
    unsigned long  func_time_start = millis();
    func_dist = polygon_calc(polygon_1, 5, points[i]);
    unsigned long  func_time = millis() - func_time_start;
    Serial.print("Function return: ");
    Serial.println(func_dist);
    Serial.print("Calculation Time: ");
    Serial.println(func_time);
    minDist = 100;
    dist = 101;
  }
  
  Serial.println("----------------------------------------------");
  
  for (int i = 0; i <= 4; i++){
    Serial.print("Point: ");
    Serial.print(points[i][0]);
    Serial.print(", ");
    Serial.println(points[i][1]);
    unsigned long  func_time_start = millis();
    func_dist = polygon_calc(polygon_2, 12, points[i]);
    unsigned long  func_time = millis() - func_time_start;
    Serial.print("Function return: ");
    Serial.println(func_dist);
    Serial.print("Calculation Time: ");
    Serial.println(func_time);
    minDist = 100;
    dist = 101;
  }
    
  Serial.println("----------------------------------------------");
  
  for (int i = 0; i <= 4; i++){
    Serial.print("Point: ");
    Serial.print(points[i][0]);
    Serial.print(", ");
    Serial.println(points[i][1]);
    unsigned long  func_time_start = millis();
    func_dist = polygon_calc(polygon_3, 99, points[i]);
    unsigned long  func_time = millis() - func_time_start;
    Serial.print("Function return: ");
    Serial.println(func_dist);
    Serial.print("Calculation Time: ");
    Serial.println(func_time);
    minDist = 100;
    dist = 101;
  }

}

void loop() {
  // put your main code here, to run repeatedly:
  
}


  
  /**
  for p1, p2 in vertices:

  var r = dotProduct(vector(p2 - p1), vector(x - p1))
  //x is the point you're looking for

  r = r/(magnitude(vector(p2 - p1)) ** 2)

  if r < 0:
    var dist = magnitude(vector(x - p1))
  else if r > 1:
    dist = magnitude(vector(p2 - x))
  else:
    dist = sqrt(magnitude(vector(x - p1)) ^ 2 - (r * magnitude(vector(p2-p1))) ^ 2)

  minDist = min(dist,minDist)
   */
float polygon_calc(float poly[][2], int poly_size, float point[2]){
  
  //Serial.println("Start polygon calc");
  
  for (int i = 0; i < poly_size; i++){
    
    int j = i + 1;
    if (j > poly_size-1){
      j = 0;
    }

    //Create all relavent vectors (p1 -> p2), (point -> p1), (p2 -> point)
    float edge[2];
    float pt_to_1[2];
    float pt_to_2[2];
    vector(poly[j], poly[i], edge);
    vector(point, poly[i], pt_to_1);
    vector(poly[j], point, pt_to_2);


    float r = dotProduct(edge, pt_to_1);

    r = r/((magnitude(edge)) * 2);

    if (r<0){
      dist = magnitude(pt_to_1);
    }
    else if (r>1){
      dist = magnitude(pt_to_2);
    }
    else{
      dist = sqrt((magnitude(pt_to_1)*(magnitude(pt_to_1))) - ((r * magnitude(edge))*(r * magnitude(edge))));
    }
  /**
    Serial.print("Distance from ");
    Serial.print(point[0]);
    Serial.print(", ");
    Serial.print(point[1]);
    Serial.print(" to line ");
    Serial.print(poly[i][0]);
    Serial.print(", ");
    Serial.print(poly[i][1]);
    Serial.print("-->");
    Serial.print(poly[j][0]);
    Serial.print(", ");
    Serial.print(poly[j][1]);
    Serial.print(" is ");
    Serial.println(dist);
   **/ 
    if(dist<minDist){
      minDist = dist;
    }
    
  }
  return minDist;
}

float dotProduct(float v1[], float v2[]){
  float dot = (v1[0]*v2[0])+(v1[1]*v2[1]);

  return dot;
}

float magnitude(float v[]){
  float mag = sqrt((v[0]*v[0])+(v[1]*v[1]));

  return mag;
}

float vector(float v1[], float v2[], float v[]){
  v[0] = v1[0]-v2[0];
  v[1] = v1[1]-v2[1];
}
